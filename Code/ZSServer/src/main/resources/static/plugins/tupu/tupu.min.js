var hidden, state, visibilityChange;
if (typeof document.hidden !== "undefined") {
    hidden = "hidden";
    visibilityChange = "visibilitychange";
    state = "visibilityState"
} else {
    if (typeof document.mozHidden !== "undefined") {
        hidden = "mozHidden";
        visibilityChange = "mozvisibilitychange";
        state = "mozVisibilityState"
    } else {
        if (typeof document.msHidden !== "undefined") {
            hidden = "msHidden";
            visibilityChange = "msvisibilitychange";
            state = "msVisibilityState"
        } else {
            if (typeof document.webkitHidden !== "undefined") {
                hidden = "webkitHidden";
                visibilityChange = "webkitvisibilitychange";
                state = "webkitVisibilityState"
            }
        }
    }
}
var _isNeedReload = false;
var _isGraphLoaded = false;
document.addEventListener(visibilityChange,
    function () {
        if (document[state] == "visible") {
            if (_isNeedReload) {
                $("#MainCy").html("");
                getData(_currentKeyNo)
            }
        } else {
            if (!_isGraphLoaded) {
                _isNeedReload = true
            }
        }
    },
    false);
var cy;
var id;
var activeNode;
var rootData, rootNode;
var _COLOR = {
    node: {
        person: "#FD485E",
        company: "#4ea2f0",
        current: "#ff9e00",
        limited: "#DC143C",
        descriptive: "#00FF00",
        rest: "#00CED1"
    },
    border: {
        person: "#FD485E",
        company: "#128BED",
        current: "#EF941B",
        limited: "#00FF00",
        descriptive: "#DC143C",
        rest: "#9400D3"
    },
    line: {
        invest: "#fd485e",
        employ: "#4ea2f0",
        legal: "#4ea2f0",
        include: "#cc6633",
        support: "#990066",
        vector: "#660066",
        apply: "#003333",
        relateude: "#EE7AE9",
        other: "pink"
    }
};
var _currentKeyNo, _companyRadius = 35,
    _personRadius = 15,
    _circleMargin = 10,
    _circleBorder = 3,
    _layoutNode = {},
    _isFocus = false;
var _maxChildrenLength = 0;

// 数组元素是json对象的去重方法
function uniqeByKeys(array, keys) {
    function obj2key(obj, keys) {
        var n = keys.length,
            key = [];
        while (n--) {
            key.push(obj[keys[n]])
        }
        return key.join("|")
    }
    var arr = [];
    var hash = {};
    for (var i = 0,
        j = array.length; i < j; i++) {
        var k = obj2key(array[i], keys);
        if (!(k in hash)) {
            hash[k] = true;
            arr.push(array[i])
        }
    }
    return arr
}
Array.prototype.unique = function () {
    var res = [];
    var json = {};
    for (var i = 0; i < this.length; i++) {
        if (!json[this[i]]) {
            res.push(this[i]);
            json[this[i]] = 1
        }
    }
    return res
};

function cloneObj(obj) {
    var newObj = {};
    if (obj instanceof Array) {
        newObj = []
    }
    for (var key in obj) {
        var val = obj[key];
        newObj[key] = typeof val === "object" ? cloneObj(val) : val
    }
    return newObj
}
function getRootData(list) {
    var graph = {};
    graph.nodes = [];
    graph.links = [];
    for (var i = 0; i < list.length; i++) {
        var nodes = list[i].graph.nodes;
        for (var j = 0; j < nodes.length; j++) {
            var node = nodes[j];
            var o = {};
            o.nodeId = node.id;
            o.data = {};
            o.data.obj = node;
            o.data.showStatus = null;
            o.layout = {};
            o.layout.level = null;
            o.layout.singleLinkChildren = [];
            graph.nodes.push(o);
            if (_currentKeyNo == o.data.obj.properties.keyNo) {
                rootNode = o
            }
        }
    }
    graph.nodes = uniqeByKeys(graph.nodes, ["nodeId"]);
    for (var i = 0; i < list.length; i++) {
        var relationships = list[i].graph.relationships;
        for (var k = 0; k < relationships.length; k++) {
            var relationship = relationships[k];
            var o = {};
            o.data = {};
            o.data.obj = relationship;
            o.data.showStatus = null;
            o.sourceNode = getGraphNode(relationship.startNode, graph.nodes);
            o.targetNode = getGraphNode(relationship.endNode, graph.nodes);
            o.linkId = relationship.id;
            o.source = getNodesIndex(relationship.startNode, graph.nodes);
            o.target = getNodesIndex(relationship.endNode, graph.nodes);
            graph.links.push(o)
        }
    }
    graph.links = uniqeByKeys(graph.links, ["linkId"]);
    setCategoryColor(graph.nodes, graph.links);
    return graph
}

function setCategoryColor(nodes, links) {
    for (var i = 0; i < links.length; i++) {
        var sameLink = {};
        sameLink.length = 0;
        sameLink.currentIndex = 0;
        sameLink.isSetedSameLink = false;
        links[i].sameLink = sameLink
    }
    for (var i = 0; i < links.length; i++) {
        var baseLink = links[i];
        if (baseLink.sameLink.isSetedSameLink == false) {
            baseLink.sameLink.isSetedSameLink = true;
            var nodeId1 = baseLink.sourceNode.nodeId;
            var nodeId2 = baseLink.targetNode.nodeId;
            var sameLinks = [];
            sameLinks.push(baseLink);
            for (var j = 0; j < links.length; j++) {
                var otherLink = links[j];
                if (baseLink.linkId != otherLink.linkId && !otherLink.sameLink.isSetedSameLink) {
                    if ((otherLink.sourceNode.nodeId == nodeId1 && otherLink.targetNode.nodeId == nodeId2) || (otherLink.sourceNode.nodeId == nodeId2 && otherLink.targetNode.nodeId == nodeId1)) {
                        sameLinks.push(otherLink);
                        otherLink.sameLink.isSetedSameLink = true
                    }
                }
            }
            for (var k = 0; k < sameLinks.length; k++) {
                var oneLink = sameLinks[k];
                oneLink.sameLink.length = sameLinks.length;
                oneLink.sameLink.currentIndex = k
            }
        }
    }
    for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (_currentKeyNo == node.data.obj.properties.keyNo) {
            node.data.color = _COLOR.node.current;
            node.data.strokeColor = _COLOR.border.current;
        } else {
            if (node.data.obj.labels[0] == "Company") {
                node.data.color = _COLOR.node.company;
                node.data.strokeColor = _COLOR.border.company
            } else if (node.data.obj.labels[0] == "limited") {
                node.data.color = _COLOR.node.limited;
                node.data.strokeColor = _COLOR.border.limited
            } else if (node.data.obj.labels[0] == "descriptive") {
                node.data.color = _COLOR.node.descriptive;
                node.data.strokeColor = _COLOR.border.descriptive
            } else if (node.data.obj.labels[0] == "person") {
                node.data.color = _COLOR.node.person;
                node.data.strokeColor = _COLOR.border.person
            } else {
                node.data.color = _COLOR.node.rest;
                node.data.strokeColor = _COLOR.border.rest
            }
        }
    }
}
function setSingleLinkNodes(links) {
    function isSingleLink(nodeId, links) {
        var hasLinks = 0;
        var isSingle = true;
        for (var i = 0; i < links.length; i++) {
            var link = links[i];
            if (link.targetNode.nodeId == nodeId || link.sourceNode.nodeId == nodeId) {
                hasLinks++
            }
            if (hasLinks > 1) {
                isSingle = false;
                break
            }
        }
        return isSingle
    }
    links.forEach(function (link, i) {
        if (isSingleLink(link.sourceNode.nodeId, links)) {
            link.targetNode.layout.singleLinkChildren.push(link.sourceNode)
        }
        if (isSingleLink(link.targetNode.nodeId, links)) {
            link.sourceNode.layout.singleLinkChildren.push(link.targetNode)
        }
    })
}
function getNodesIndex(nodeId, nodes) {
    var index = 0;
    for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (nodeId == node.nodeId) {
            index = i;
            break
        }
    }
    return index
}
function isNodeExist(nodeId, nodes) {
    var exist = false;
    for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        console.log(node)
        if (nodeId == node.nodeId) {
            exist = true;
            break
        }
    }
    return exist
}
function filterLinksByNodes(nodes, allLinks) {
    function isExists(nodes, nodeId) {
        var exist = false;
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.nodeId == nodeId) {
                exist = true;
                break
            }
        }
        return exist
    }
    var sel_links = [];
    for (var i = 0; i < allLinks.length; i++) {
        var link = allLinks[i];
        if (isExists(nodes, link.sourceNode.nodeId) && isExists(nodes, link.targetNode.nodeId)) {
            link.source = getNodesIndex(link.sourceNode.nodeId, nodes);
            link.target = getNodesIndex(link.targetNode.nodeId, nodes);
            sel_links.push(link)
        }
    }
    return sel_links
}
function getGraphNode(nodeId, nodes) {
    var node = null;
    for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].nodeId == nodeId) {
            node = nodes[i];
            break
        }
    }
    return node
}
function getSubNodes(node, links) {
    var subNodes = [];
    var nodeId = node.nodeId;
    var level = node.layout.level;
    for (var i = 0; i < links.length; i++) {
        var link = links[i];
        if (link.sourceNode.nodeId == nodeId && link.targetNode.layout.level == level + 1) {
            subNodes.push(link.targetNode)
        }
        if (link.targetNode.nodeId == nodeId && link.sourceNode.layout.level == level + 1) {
            subNodes.push(link.sourceNode)
        }
    }
    subNodes = uniqeByKeys(subNodes, ["nodeId"]);
    return subNodes
}
function filterNodesByStatus(status, nodes) {
    if (status == "all") {
        return nodes
    }
    var sel_nodes = [];
    for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (node.data.obj.labels == "Company" && node.data.obj.properties.status == status) {
            sel_nodes.push(node)
        }
    }
    return sel_nodes
}
function filterNodesByStockNum(num, links) {
    var sel_links = [];
    for (var i = 0; i < links.length; i++) {
        if (num == links[i].data.obj.properties.stockPercent) {
            sel_links.push(links[i])
        }
    }
    return sel_links
}
function filterNodesByInvest(invest, nodes, links) {
    function getInvestNodes(nodeId, links) {
        var investNodes = [];
        for (var i = 0; i < links.length; i++) {
            var link = links[i];
            if (link.sourceNode.nodeId == nodeId && link.data.obj.type == "INVEST") {
                investNodes.push(link.targetNode)
            }
        }
        return investNodes
    }
    function getCompanyStockholder(nodeId, links) {
        var stockholderNodes = [];
        for (var i = 0; i < links.length; i++) {
            var link = links[i];
            if (link.targetNode.nodeId == nodeId && link.data.obj.type == "INVEST") {
                stockholderNodes.push(link.sourceNode)
            }
        }
        return stockholderNodes
    }
    function getPersonStockholder(nodeId, links) {
        var stockholderNodes = [];
        for (var i = 0; i < links.length; i++) {
            var link = links[i];
            if (link.targetNode.nodeId == nodeId && link.data.obj.type == "INVEST" && link.sourceNode.data.obj.labels[0] == "Person") {
                stockholderNodes.push(link.sourceNode)
            }
        }
        return stockholderNodes
    }
    var sel_nodes = [];
    switch (invest) {
        case "all":
            return nodes;
            break;
        case "direct":
            sel_nodes = getInvestNodes(rootNode.nodeId, links);
            break;
        case "stockholder":
            var nextNodes = [];
            var stockholderNodes = getCompanyStockholder(rootNode.nodeId, links);
            for (var i = 0; i < stockholderNodes.length; i++) {
                nextNodes = nextNodes.concat(getInvestNodes(stockholderNodes[i].nodeId, links))
            }
            sel_nodes = stockholderNodes.concat(nextNodes);
            break;
        case "legal":
            var nextNodes = [];
            var stockholderNodes = getPersonStockholder(rootNode.nodeId, links);
            for (var i = 0; i < stockholderNodes.length; i++) {
                nextNodes = nextNodes.concat(getInvestNodes(stockholderNodes[i].nodeId, links))
            }
            sel_nodes = stockholderNodes.concat(nextNodes);
            break
    }
    sel_nodes = sel_nodes.concat(rootNode);
    sel_nodes = uniqeByKeys(sel_nodes, ["nodeId"]);
    return sel_nodes
}
function filter(rootData) {
    var sel_nodes = [];
    for (var i = 0; i < rootData.nodes.length; i++) {
        sel_nodes.push(rootData.nodes[i])
    }
    var sel_links = [];
    for (var i = 0; i < rootData.links.length; i++) {
        sel_links.push(rootData.links[i])
    }
    if (status) {
        sel_nodes = filterNodesByStatus(status, sel_nodes)
    }
    var stock_nodes = [];
    if (num && num != 0) {
        sel_links = filterLinksByNodes(sel_nodes, sel_links);
        sel_links = filterNodesByStockNum(num, sel_links);
        for (var i = 0; i < sel_links.length; i++) {
            stock_nodes.push(sel_links[i].sourceNode);
            stock_nodes.push(sel_links[i].targetNode)
        }
        sel_nodes = uniqeByKeys(stock_nodes, ["nodeId"])
    }
    if (invest) {
        sel_nodes = filterNodesByInvest(invest, sel_nodes, sel_links)
    }
    var graphData = {};
    graphData.nodes = sel_nodes;
    graphData.links = filterLinksByNodes(sel_nodes, rootData.links);
    domUpdate(graphData.nodes, graphData.links)
}

function isFullScreen() {
    if (document.fullscreen) {
        return true
    } else {
        if (document.mozFullScreen) {
            return true
        } else {
            if (document.webkitIsFullScreen) {
                return true
            } else {
                if (document.msFullscreenElement) {
                    return true
                } else {
                    return false
                }
            }
        }
    }
}



function drawGraph(elements) {
    _currentKeyNo,
        _companyRadius = 35,
        _personRadius = 15,
        _circleMargin = 10,
        _circleBorder = 3;
    cy = cytoscape({
        container: document.getElementById("MainCy"),
        motionBlur: false,
        textureOnViewport: false,
        wheelSensitivity: 0.1,
        elements: elements,
        zoom: 1,
        minZoom: 1,
        maxZoom: 2,
        layout: {
            name: "preset",
            componentSpacing: 40,
            nestingFactor: 12,
            padding: 10,
            edgeElasticity: 800,
            stop: function (e) {
                if (document[state] == "hidden") {
                    _isNeedReload = true
                } else {
                    _isNeedReload = false
                }
                setTimeout(function () {
                    if (document[state] == "hidden") {
                        _isGraphLoaded = false;
                    } else {
                        _isGraphLoaded = true
                    }
                },
                    1000)
            }
        },
        style: [{
            selector: "node",
            style: {
                shape: "ellipse",
                width: function (ele) {
                    if (ele.data("type") == "limited") {
                        return 60
                    } else if (ele.data("type") == "descriptive") {
                        return 45;
                    }
                    return 40
                },
                height: function (ele) {
                    if (ele.data("type") == "limited") {
                        return 60
                    } else if (ele.data("type") == "descriptive") {
                        return 45;
                    }
                    return 40

                },
                "background-color": function (ele) {
                    return ele.data("color")
                },
                "border-color": function (ele) {
                    return ele.data("borderColor")
                },
                "border-width": 1,
                "border-opacity": 1,
                label: function (ele) {
                    var label = ele.data("name");
                    var length = label.length;
                    if (length <= 5) {
                        return label
                    } else {
                        if (length >= 5 && length <= 9) {
                            return label.substring(0, length - 5) + "\n" + label.substring(length - 5, length)
                        } else {
                            if (length >= 9 && length <= 13) {
                                return label.substring(0, 4) + "\n" + label.substring(4, 9) + "\n" + label.substring(9, 13)
                            } else {
                                return label.substring(0, 4) + "\n" + label.substring(4, 9) + "\n" + label.substring(9, 12) + ".."
                            }
                        }
                    }
                },
                "z-index-compare": "manual",
                "z-index": 20,
                color: "#fff",
                "padding": function (ele) {
                    if (ele.data("type") == "Company") {
                        return 3
                    }
                    return 0
                },
                "font-size": 12,
                "font-family": "microsoft yahei",
                "text-wrap": "wrap",
                "text-max-width": 60,
                "text-halign": "center",
                "text-valign": "center",
                "overlay-color": "#fff",
                "overlay-opacity": 0,
                "background-opacity": 1,
                "text-margin-y": function (ele) {
                    if (ele.data("type") == "Company") {
                        return 4
                    }
                    return 2
                },
            }
        },
        {
            selector: "edge",
            style: {
                "line-style": function (ele) {
                    return "solid"
                },
                "curve-style": "bezier",
                "control-point-step-size": 20,
                "target-arrow-shape": "triangle-backcurve",
                "target-arrow-color": function (ele) {
                    return ele.data("color")
                },
                "arrow-scale": 0.5,
                "line-color": function (ele) {
                    return ele.data("color")
                },
                label: function (ele) {
                    return ""
                },
                "text-opacity": 0.8,
                "font-size": 12,
                "background-color": function (ele) {
                    return "#ccc";
                    return ele.data("color")
                },
                "width": 0.3,
                "overlay-color": "#fff",
                "overlay-opacity": 0,
                "font-family": "microsoft yahei",
            }
        },
        {
            "selector": ".autorotate",
            "style": {
                "edge-text-rotation": "autorotate"
            }
        },
        {
            selector: ".nodeActive",
            style: {
                "border-color": function (ele) {
                    return ele.data("color")
                },
                "border-width": 10,
                "border-opacity": 0.5
            }
        },
        {
            selector: ".edgeShow",
            style: {
                "color": "#999",
                "text-opacity": 1,
                "font-weight": 400,
                label: function (ele) {
                    return ele.data("label")
                },
                "font-size": 10,
            }
        },
        {
            selector: ".edgeActive",
            style: {
                "arrow-scale": 0.8,
                "width": 1.5,
                "color": "#fff",
                "text-opacity": 1,
                "font-size": 14,
                "text-background-opacity": 0.8,
                "text-background-padding": 0,
                "source-text-margin-y": 20,
                "target-text-margin-y": 20,
                "z-index-compare": "manual",
                "z-index": 1,
                "line-color": function (ele) {
                    return ele.data("color")
                },
                "target-arrow-color": function (ele) {
                    return ele.data("color")
                },
                label: function (ele) {
                    return ele.data("label")
                }
            }
        },
        {
            selector: ".hidetext",
            style: {
                "text-opacity": 0,
            }
        },
        {
            selector: ".dull",
            style: {
                "z-index": 1,
                opacity: 0.2,
            }
        },
        {
            selector: ".nodeHover",
            style: {
                shape: "ellipse",
                "background-opacity": 0.9,
            }
        },
        {
            selector: ".edgeLevel1",
            style: {
                label: function (ele) {
                    return ele.data("label")
                },
            }
        },
        {
            selector: ".edgeShowText",
            style: {
                label: function (ele) {
                    return ele.data("label")
                },
            }
        },
        {
            selector: ".lineFixed",
            style: {
                "overlay-opacity": 0,
            }
        },
        ],
    });

    cy.on("click", "node",
        function (evt) {
            if (evt.target._private.style["z-index"].value == 20) {
                _isFocus = true;
                var node = evt.target;
                highLight([node._private.data.id], cy);
                if (node.hasClass("nodeActive")) {
                    activeNode = null;
                    node.removeClass("nodeActive");
                    cy.collection("edge").removeClass("edgeActive")
                } else {
                    var nodeData = node._private.data;
                    showDetail(nodeData.name)
                    $(".tp-name").html("")
                    $(".tp-detail").show();
                    activeNode = node;
                    cy.collection("node").removeClass("nodeActive");
                    cy.collection("edge").removeClass("edgeActive");
                    node.addClass("nodeActive");
                    node.neighborhood("edge").removeClass("opacity");
                    node.neighborhood("edge").addClass("edgeActive");
                    node.neighborhood("edge").connectedNodes().removeClass("opacity")
                }
            } else {
                _isFocus = false;
                activeNode = null;
                cy.collection("node").removeClass("nodeActive");
                $(".tp-detail").hide()
                cancelHighLight()
            }
        });
    var showTipsTime = null;
    cy.on("mouseover", "node",
        function (evt) {
            if (evt.target._private.style["z-index"].value == 20) {
                $("#Main").css("cursor", "pointer");
                var node = evt.target;
                node.addClass("nodeHover");
                if (!_isFocus) {
                    cy.collection("edge").removeClass("edgeActive");
                    node.neighborhood("edge").addClass("edgeActive")
                }
                clearTimeout(showTipsTime);
            }
        });
    cy.on("mouseout", "node",
        function (evt) {
            $("#Main").css("cursor", "default");
            clearTimeout(showTipsTime);
            var node = evt.target;
            node.removeClass("nodeHover");
            if (!_isFocus) {
                cy.collection("edge").removeClass("edgeActive")
            }
        });
    cy.on("mouseover", "edge",
        function (evt) {
            if (!_isFocus) {
                var edge = evt.target;
                cy.collection("edge").removeClass("edgeActive");
                edge.addClass("edgeActive")
            }
        });
    cy.on("mouseout", "edge",
        function (evt) {
            if (!_isFocus) {
                var edge = evt.target;
                edge.removeClass("edgeActive");
                if (activeNode) {
                    activeNode.neighborhood("edge").addClass("edgeActive")
                }
            }
        });
    cy.on("vmousedown", "node",
        function (evt) {
            var node = evt.target;
            if (!_isFocus) {
                highLight([node._private.data.id], cy)
            }
        });
    cy.on("tapend", "node",
        function (evt) {
            if (!_isFocus) {
                cancelHighLight()
            }
        });
    cy.on("click", "edge",
        function (evt) {
            _isFocus = false;
            activeNode = null;
            cy.collection("node").removeClass("nodeActive");
            $(".tp-detail").hide();
            cancelHighLight()
        });
    cy.on("click",
        function (event) {
            var evtTarget = event.target;
            if (evtTarget === cy) {
                _isFocus = false;
                activeNode = null;
                cy.collection("node").removeClass("nodeActive");
              
                $(".tp-detail").hide();
                cancelHighLight()
            } else { }
        });
    cy.on("zoom",
        function () {
            if (cy.zoom() < 0.5) {
                cy.collection("node").addClass("hidetext");
                cy.collection("edge").addClass("hidetext")
            } else {
                cy.collection("node").removeClass("hidetext");
                cy.collection("edge").removeClass("hidetext")
            }
            setTimeout(function () {
                cy.collection("edge").removeClass("lineFixed");
                cy.collection("edge").addClass("lineFixed")
            },
                200)
        });
    cy.on("pan",
        function () {
            setTimeout(function () {
                cy.collection("edge").removeClass("lineFixed");
                cy.collection("edge").addClass("lineFixed")
            },
                200)
        });
    cy.nodes().positions(function (node, i) {
        if (node._private.data.keyNo == _currentKeyNo) {
            var position = cy.pan();
            cy.pan({
                x: position.x - node._private.data.d3x,
                y: position.y - node._private.data.d3y
            })
        }
        return {
            x: node._private.data.d3x,
            y: node._private.data.d3y
        }
    });
    cy.ready(function () {
        cy.zoom({
            level: 1.0000095043745896,
        });
        $("#load_data").hide();
        setTimeout(function () {
            cy.collection("edge").addClass("lineFixed")
        },
            400)
    });
    cy.nodes(function (node) { })
}
function highLight(nodeIds, cy) {
    cy.collection("node").removeClass("nodeActive");
    cy.collection("edge").removeClass("edgeActive");
    cy.collection("node").addClass("dull");
    cy.collection("edge").addClass("dull");
    for (var i = 0; i < nodeIds.length; i++) {
        var nodeId = nodeIds[i];
        cy.nodes(function (node) {
            var nodeData = node._private.data;
            if (nodeData.id == nodeId) {
                node.removeClass("dull");
                node.neighborhood("edge").removeClass("dull");
                node.neighborhood("edge").addClass("edgeActive");
                node.neighborhood("edge").connectedNodes().removeClass("dull")
            }
        })
    }
}
function cancelHighLight() {
    cy.collection("node").removeClass("nodeActive");
    cy.collection("edge").removeClass("edgeActive");
    cy.collection("node").removeClass("dull");
    cy.collection("edge").removeClass("dull")
}
function getD3Position(graph) {
    getLayoutNode(graph);
    function filterLinks1(graph) {
        var layoutLinks = [];
        for (var i = 0; i < graph.links.length; i++) {
            var link = graph.links[i];
            var sourceLevel = link.sourceNode.layout.level;
            var targetLevel = link.targetNode.layout.level;
            var sourceNode = link.sourceNode;
            var targetNode = link.targetNode;
            if ((sourceLevel == 1 && targetLevel == 2) || (sourceLevel == 2 && targetLevel == 1)) {
                layoutLinks.push(link)
            }
            if ((sourceLevel == 2 && targetLevel == 3) || (sourceLevel == 3 && targetLevel == 2)) {
                layoutLinks.push(link)
            }
        }
        layoutLinks.forEach(function (link, i) {
            if (link.targetNode.layout.level == 3) {
                layoutLinks.forEach(function (alink, j) {
                    if (alink.linkId != link.linkId && (alink.targetNode.nodeId == link.targetNode.nodeId || alink.sourceNode.nodeId == link.targetNode.nodeId)) {
                        layoutLinks.splice(j, 1)
                    }
                })
            }
            if (link.sourceNode.layout.level == 3) {
                layoutLinks.forEach(function (alink, j) {
                    if (alink.linkId != link.linkId && (alink.targetNode.nodeId == link.sourceNode.nodeId || alink.sourceNode.nodeId == link.sourceNode.nodeId)) {
                        layoutLinks.splice(j, 1)
                    }
                })
            }
        });
        return layoutLinks
    }
    function filterLinks2(graph) {
        var layoutLinks = [];
        for (var i = 0; i < graph.links.length; i++) {
            var link = graph.links[i];
            var sourceLevel = link.sourceNode.layout.level;
            var targetLevel = link.targetNode.layout.level;
            var sourceNode = link.sourceNode;
            var targetNode = link.targetNode;
            if ((sourceLevel == 1 && targetLevel == 2) || (sourceLevel == 2 && targetLevel == 1)) {
                layoutLinks.push(link)
            }
            if ((sourceLevel == 2 && targetLevel == 3) || (sourceLevel == 3 && targetLevel == 2)) {
                layoutLinks.push(link)
            }
        }
        return layoutLinks
    }
    function initD3Data(graph) {
        function getIndex(val, arr) {
            var index = 0;
            for (var i = 0; i < arr.length; i++) {
                var obj = arr[i];
                if (val == obj.nodeId) {
                    index = i;
                    break
                }
            }
            return index
        }
        for (var i = 0; i < graph.nodes.length; i++) {
            var node = graph.nodes[i];
            node.id = node.nodeId
        }
        for (var i = 0; i < graph.links.length; i++) {
            var link = graph.links[i];
            link.source = getIndex(link.sourceNode.nodeId, graph.nodes);
            link.target = getIndex(link.targetNode.nodeId, graph.nodes);
            link.index = i
        }
        graph.layoutLinks = filterLinks1(graph);
        setSingleLinkNodes(graph.layoutLinks);
        graph.nodes.forEach(function (node, i) {
            if (node.layout.singleLinkChildren.length && _maxChildrenLength < node.layout.singleLinkChildren.length) {
                _maxChildrenLength = node.layout.singleLinkChildren.length
            }
        })
    }
    initD3Data(graph);
    var width = $("#MainD3 svg").width();
    var height = $("#MainD3 svg").height();
    var strength = -600,
        distanceMax = 40,
        theta = 0,
        distance = 130,
        colideRadius = 35,
        distanceMin = 25;
    d3.forceSimulation(graph.nodes).force("charge", d3.forceManyBody().strength(strength).distanceMax(distanceMax).theta(theta)).force("link", d3.forceLink(graph.layoutLinks).distance(distance)).force("center", d3.forceCenter(width / 2, height / 2)).force("collide", d3.forceCollide().radius(function () {
        return colideRadius
    })).on("tick", ticked)
}
var svg = d3.select("svg");
svg.selectAll("g").remove();
var svg_g = svg.append("g");
var svg_nodes = svg_g.selectAll("circle").enter().append("circle").attr("r",
    function (d) {
        if (d.data.obj.labels[0] == "Company") {
            return 33
        } else {
            return 24
        }
    }).attr("fill",
        function (d, i) {
            return d.data.color
        }).style("opacity", 1);
function ticked() {
    svg_nodes.attr("cx",
        function (d) {
            return d.x
        }).attr("cy",
            function (d) {
                return d.y
            })
}
function getLayoutNode(graphData) {
    var layoutNode = {
        current: rootNode,
        level1: [],
        level2: [],
        level3: [],
        level4: [],
        level5: [],
        other: []
    };
    graphData.nodes.forEach(function (node, i) {
        switch (node.layout.level) {
            case 1:
                layoutNode.level1.push(node);
                break;
            case 2:
                layoutNode.level2.push(node);
                break;
            case 3:
                layoutNode.level3.push(node);
                break;
            case 4:
                layoutNode.level4.push(node);
                break;
            case 5:
                layoutNode.level5.push(node);
                break;
            default:
                layoutNode.other.push(node);
                break
        }
    });
    _layoutNode = layoutNode;
    return layoutNode
}
function transformData(graphData) {
    function getLinkColor(type) {
        if (type == "INCLUDE") {
            return _COLOR.line.include
        } else {
            if (type == "SUPPORT") {
                return _COLOR.line.support
            } else {
                if (type == "VECTOR") {
                    return _COLOR.line.vector
                }
            }
            if (type == "APPLY") {
                return _COLOR.line.apply
            } else {
                if (type == "RELATEUDE") {
                    return _COLOR.line.relateude
                }
            }
            if (type == "EMPLOY") {
                return _COLOR.line.employ
            } else {
                if (type == "LEGAL") {
                    return _COLOR.line.legal
                }
            }
            if (type == "INVEST") {
                return _COLOR.line.invest
            } else {
                if (type == "OTHER") {
                    return _COLOR.line.other
                }
            }
        }
    }
    function getLinkLabel(link) {

        var type = link.data.obj.type,
            role = link.data.obj.properties.role;
        return role;
    }

    id = graphData.nodes[0].nodeId;
    var els = {};
    els.nodes = [];
    els.edges = [];
    graphData.links.forEach(function (link, i) {
        var color = getLinkColor(link.data.obj.type);
        var label = getLinkLabel(link);
        els.edges.push({
            data: {
                data: link.data,
                color: color,
                id: link.linkId,
                label: label,
                source: link.sourceNode.nodeId,
                target: link.targetNode.nodeId
            },
            classes: "autorotate"
        })
    });
    graphData.nodes.forEach(function (node) {
        els.nodes.push({
            data: {
                nodeId: node.nodeId,
                type: node.data.obj.labels[0],
                keyNo: node.data.obj.properties.keyNo,
                data: node.data,
                id: node.nodeId,
                name: node.data.obj.properties.name,
                category: node.data.category,
                color: node.data.color,
                borderColor: node.data.strokeColor,
                layout: node.layout,
                d3x: node.x,
                d3y: node.y,
            }
        })
    });
    return els
}

// 更新
function domUpdate(rootData) {
    getD3Position(rootData);
    setTimeout(function () {
        drawGraph(transformData(rootData))
    },
        500)
}

// 获取文字
function getData(keyNo, name) {
    var defaultParam = {
        keyNo: keyNo,
    };
    // param = $.extend(defaultParam, param);
    $("#load_data").show();
    $.ajax({
        url: "/apis/atlas/getAtlasAndResponse.json?subject=" + name,
        type: "GET",
        dataType: "JSON",
        success: function (res) {
            getName = res.data.success.results[0].data[0].graph.nodes;
            var arr = [];
            for (var i = 0; i < getName.length; i++) {
                arr.push(getName[i].properties.name)
                showDetail(getName[i].properties.name)
            }

            re = res.data.success;
            if (!re || re.results == undefined || !re.results[0] || !re.results[0].data.length || re.results[0].data[0].graph.nodes.length == 0) {
                $("#load_data").hide();
                $("#Main").hide();
                $("#no_data").show();
                return
            } else {
                $("#Main").show();
                $("#no_data").hide()
            }
            rootData = getRootData(re.results[0].data);
            domUpdate(rootData)
        },
        error: function (data) {
            $("#load_data").hide();
            $("#Main").hide();
            $("#no_data").show()
        }
    });


}
$(".tp-detail-close span").click(function () {
    $(".tp-detail").hide()
});
$(document).ready(function () {
    _currentKeyNo = getQueryString("keyNo");
    name = getQueryString("name");
    getData(_currentKeyNo, name);
});

//显示企业列表、详情

function showDetail(getqyname) {
    var companyname = "";
    
    $.ajax({
        url: "/apis/atlas/getAtlasCompany.json?name=" + getqyname,
        type: "GET",
        success: function (req) {
            if (req.data == null) {
                companyname += "<li>暂无数据!</li>"
                $(".tp-name").html(companyname)
            } 
            else {
                for(var i =0;i<req.data.length;i++){
                    companyname += "<li onclick='qydetail(this)' style='cursor: pointer'>"+req.data[i]+"</li>";
                }
                $(".tp-name").html(companyname)
            }

        }
    })
}

function qydetail(qyname){
    window.parent.location.href = "/apis/company/baseInfo.html?companyName="+$(qyname).text();
}
